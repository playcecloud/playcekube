#!/bin/sh
BASEDIR=$(dirname $(readlink -f $0))

if [ -f ${BASEDIR}/../../playcekube.conf ]; then
  . ${BASEDIR}/../../playcekube.conf
fi

# ntp(chrony) server restart
systemctl enable chronyd --now
systemctl restart chronyd

# registry container restart
docker stop playcekube_registry 2> /dev/null
docker rm playcekube_registry 2> /dev/null
docker run -d --name playcekube_registry \
--restart always \
-v ${PLAYCE_DIR}/playcekube/deployer/registry:/etc/docker/registry \
-v ${PLAYCE_DATADIR}/registry:/var/lib/registry \
-p 5000:5000 \
docker.io/library/registry:2.7.1

# dns(bind9) container restart
docker stop playcekube_bind9 2> /dev/null
docker rm playcekube_bind9 2> /dev/null
docker run -d --name playcekube_bind9 \
--restart always \
-e TZ=Asia/Seoul \
-v ${PLAYCE_DIR}/playcekube/deployer/bind9/config:/etc/bind \
-v ${PLAYCE_DIR}/playcekube/deployer/bind9/cache:/var/cache/bind \
-v ${PLAYCE_DIR}/playcekube/deployer/bind9/records:/run/name \
-p 53:8053 \
-p 53:8053/udp \
docker.io/ubuntu/bind9:9.16-21.10_edge

# repository (nginx) container restart
docker stop playcekube_repositories 2> /dev/null
docker rm playcekube_repositories 2> /dev/null
docker run -d --name playcekube_repositories \
--restart always \
-v ${PLAYCE_DIR}/playcekube/deployer/nginx/repositories.conf:/etc/nginx/nginx.conf \
-v ${PLAYCE_DIR}/playcekube/deployer/nginx/servers.conf:/etc/nginx/servers.conf \
-v ${PLAYCE_DIR}/playcekube/deployer/nginx/ssl:/etc/nginx/ssl \
-v ${PLAYCE_DATADIR}/repositories:/repositories \
-p 80:80 \
-p 443:443 \
docker.io/library/nginx:1.20.2

## resolv.conf modify
cat << EOF > /etc/resolv.conf
# generated by playcekube
nameserver 127.0.0.1
nameserver ${UPSTREAM_DNS}
EOF

# hosts modify
sed -i "/registry.${PLAYCE_DOMAIN}/d" /etc/hosts
cat << EOF >> /etc/hosts
${PLAYCE_DEPLOYER} registry.${PLAYCE_DOMAIN} repository.${PLAYCE_DOMAIN} repositories.${PLAYCE_DOMAIN}
EOF

# binary copy
echo "######## Kubernetes utils copy ########"
echo "# copy kubectl"
K8S_VERSION=${PLAYCEKUBE_VERSION/k/}
if [ ! -f "${PLAYCE_DIR}/data/repositories/kubernetes/${K8S_VERSION}/kubectl" ]; then
  mkdir -p ${PLAYCE_DIR}/data/repositories/kubernetes/${K8S_VERSION}
  cd ${PLAYCE_DIR}/data/repositories/kubernetes/${K8S_VERSION}
  curl -LO https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubectl
fi

cp --remove-destination ${PLAYCE_DIR}/data/repositories/kubernetes/${K8S_VERSION}/kubectl /usr/local/bin/kubectl
chmod 755 /usr/local/bin/kubectl
kubectl completion bash > /etc/bash_completion.d/kubectl
echo "alias kc=kubectl" >> ~/.bashrc
echo "complete -F __start_kubectl kc" >> ~/.bashrc

echo "# copy helm"
HELM_TARFILE=$(ls ${PLAYCE_DIR}/data/repositories/kubernetes/helm/ | head -n 1)
if [ ! -f "${PLAYCE_DIR}/data/repositories/kubernetes/helm/${HELM_TARFILE}" ]; then
  mkdir -p ${PLAYCE_DIR}/data/repositories/kubernetes/helm
  cd ${PLAYCE_DIR}/data/repositories/kubernetes/helm
  curl -LO https://get.helm.sh/helm-v3.7.2-linux-amd64.tar.gz
  HELM_TARFILE=helm-v3.7.2-linux-amd64.tar.gz
fi

tar zxfp ${PLAYCE_DIR}/data/repositories/kubernetes/helm/${HELM_TARFILE} linux-amd64/helm
mv -f linux-amd64/helm /usr/local/bin/helm
rm -rf linux-amd64
helm completion bash > /etc/bash_completion.d/helm

# helm chart install
echo "# install helm chart"
helm repo index ${PLAYCE_DATADIR}/repositories/helm-charts --url https://repositories.${PLAYCE_DOMAIN}/helm-charts
helm repo add --force-update playcekube https://repositories.${PLAYCE_DOMAIN}/helm-charts

# playcekube shell
echo "# link playcekube"
unlink /usr/local/bin/playcekube
ln -s ${PLAYCE_DIR}/playcekube/deployer/scripts/playcekube.sh /usr/local/bin/playcekube

# ssh-key-copy
echo "# copy ssh-key"
mkdir -p ~/.ssh
touch ~/.ssh/authorized_keys
sed -i "/$(cat /playcecloud/playcekube/deployer/kubespray/kubespray_ssh.pub | sed 's|/|\\/|g')/d" ~/.ssh/authorized_keys
cat ${PLAYCE_DIR}/playcekube/deployer/kubespray/kubespray_ssh.pub >> ~/.ssh/authorized_keys


#!/bin/bash

# sh config
BASEDIR=$(dirname $(readlink -f $0))

# PLAYCE CONF
PLAYCE_DIR=/playcecloud
if [ -f ${PLAYCE_DIR}/playcecloud.conf ]; then
  . ${PLAYCE_DIR}/playcecloud.conf
fi

function getOSFamily()
{
  local osfamily="unknown"
  local osid=$(grep "^ID=" /etc/os-release | sed "s/ID=\(.*\)/\1/g")
  osid=${osid//\"/}

  if [[ "${osid}" =~ rocky|centos|almalinux|rhel ]]; then
    osfamily="centos"
  elif [[ "${osid}" =~ debian|ubuntu ]]; then
    osfamily="debian"
  fi

  echo ${osfamily};
}

function getOSVersion()
{
  local osversion=$(grep "^VERSION_ID=" /etc/os-release | sed "s/VERSION_ID=\(.*\)/\1/g")
  osversion=${osversion//\"/}
  osversion=${osversion%.*}

  echo ${osversion};
}

function getOSVersionCodeName()
{
  local osversion=$(grep "^VERSION_CODENAME=" /etc/os-release | sed "s/VERSION_CODENAME=\(.*\)/\1/g")
  osversion=${osversion//\"/}
  osversion=${osversion%.*}

  echo ${osversion};
}


# check info
CHECKOSFAMILY=$(getOSFamily)
CHECKOSVERSION=$(getOSVersion)
CHECKOSVERSIONCODENAME=$(getOSVersionCodeName)

# timezone
timedatectl set-timezone Asia/Seoul

if [ "${CHECKOSFAMILY}" == "centos" ]; then
  # selinux disable
  sed -i "s/^SELINUX=.*/SELINUX=disabled/g" /etc/selinux/config
  setenforce 0
fi

## systemd-resolve disable
systemctl disable systemd-resolved.service --now

cat << EOF > /etc/resolv.conf
# generated by playcekube
nameserver 127.0.0.1
nameserver ${UPSTREAM_DNS}
EOF

# ca-trust update
${PLAYCE_DIR}/playcekube/certificates/create-certs.sh
${PLAYCE_DIR}/playcekube/certificates/create-certs.sh -t ec rootca_ec
if [ "${CHECKOSFAMILY}" == "debian" ]; then
  cp -rp ${PLAYCE_DATADIR}/certificates/ca/playcecloud_rootca.crt /usr/local/share/ca-certificates/
  update-ca-certificates
elif [ "${CHECKOSFAMILY}" == "centos" ]; then
  cp -rp ${PLAYCE_DATADIR}/certificates/ca/playcecloud_rootca.crt /etc/pki/ca-trust/source/anchors/
  update-ca-trust extract
fi

# hosts modify
sed -i "/registry.${PLAYCE_DOMAIN}/d" /etc/hosts
sed -i "/registry.local.cloud/d" /etc/hosts
cat << EOF >> /etc/hosts
${PLAYCE_DEPLOY} registry.local.cloud repository.local.cloud repositories.local.cloud keycloak.local.cloud rancher.local.cloud registry.${PLAYCE_DOMAIN} repository.${PLAYCE_DOMAIN} repositories.${PLAYCE_DOMAIN} keycloak.${PLAYCE_DOMAIN} rancher.${PLAYCE_DOMAIN}
EOF

if [[ "${CHECKOSFAMILY}" == "centos" ]]; then
mkdir -p /etc/yum.repos.d/backup-$(date +%Y%m%d)
mv /etc/yum.repos.d/* /etc/yum.repos.d/backup-$(date +%Y%m%d)

# docker-ce
cat << EOF > /etc/yum.repos.d/docker-ce-stable.repo
[docker-ce-stable]
name=Docker CE Stable - \$basearch
baseurl=file://${PLAYCE_DATADIR}/repositories/${CHECKOSFAMILY}${CHECKOSVERSION}/docker-ce-stable
enabled=1
gpgcheck=0
EOF

  if [[ "${CHECKOSVERSION}" == "8" ]]; then

# baseos, appstream
cat << EOF > /etc/yum.repos.d/base.repo
[baseos]
name=Rocky Linux \$releasever - BaseOS
baseurl=file://${PLAYCE_DATADIR}/repositories/${CHECKOSFAMILY}${CHECKOSVERSION}/baseos
enabled=1
gpgcheck=0

[appstream]
name=Rocky Linux \$releasever - AppStream
baseurl=file://${PLAYCE_DATADIR}/repositories/${CHECKOSFAMILY}${CHECKOSVERSION}/appstream
enabled=1
gpgcheck=0

[extras]
name=Rocky Linux \$releasever - Extras
baseurl=file://${PLAYCE_DATADIR}/repositories/${CHECKOSFAMILY}${CHECKOSVERSION}/extras
enabled=1
gpgcheck=0
EOF

  else

# centos7 base
cat << EOF > /etc/yum.repos.d/base.repo
[base]
name=CentOS-\$releasever - Base
baseurl=file://${PLAYCE_DATADIR}/repositories/${CHECKOSFAMILY}${CHECKOSVERSION}/base
enabled=1
gpgcheck=0

[updates]
name=CentOS-\$releasever - Updates
baseurl=file://${PLAYCE_DATADIR}/repositories/${CHECKOSFAMILY}${CHECKOSVERSION}/updates
enabled=1
gpgcheck=0

[extras]
name=CentOS-\$releasever - Extras
baseurl=file://${PLAYCE_DATADIR}/repositories/${CHECKOSFAMILY}${CHECKOSVERSION}/extras
enabled=1
gpgcheck=0

[epel]
name=CentOS-\$releasever - EPEL
baseurl=file://${PLAYCE_DATADIR}/repositories/${CHECKOSFAMILY}${CHECKOSVERSION}/epel
enabled=1
gpgcheck=0
EOF

  fi

yum clean all

elif [[ "${CHECKOSFAMILY}" == "debian" ]]; then

  mkdir -p /etc/apt/backup-$(date +%Y%m%d)
  mv /etc/apt/sources.list /etc/apt/backup-$(date +%Y%m%d)

cat << EOF > /etc/apt/sources.list
deb file:${PLAYCE_DATADIR}/repositories/${CHECKOSVERSIONCODENAME}/ubuntu ${CHECKOSVERSIONCODENAME} main restricted
deb file:${PLAYCE_DATADIR}/repositories/${CHECKOSVERSIONCODENAME}/ubuntu ${CHECKOSVERSIONCODENAME}-updates main restricted
deb file:${PLAYCE_DATADIR}/repositories/${CHECKOSVERSIONCODENAME}/ubuntu ${CHECKOSVERSIONCODENAME} universe
deb file:${PLAYCE_DATADIR}/repositories/${CHECKOSVERSIONCODENAME}/ubuntu ${CHECKOSVERSIONCODENAME}-updates universe
deb file:${PLAYCE_DATADIR}/repositories/${CHECKOSVERSIONCODENAME}/ubuntu ${CHECKOSVERSIONCODENAME}-backports main restricted universe
deb file:${PLAYCE_DATADIR}/repositories/${CHECKOSVERSIONCODENAME}/ubuntu ${CHECKOSVERSIONCODENAME}-security main restricted
deb file:${PLAYCE_DATADIR}/repositories/${CHECKOSVERSIONCODENAME}/ubuntu ${CHECKOSVERSIONCODENAME}-security universe

deb [arch=amd64 signed-by=${PLAYCE_DATADIR}/repositories/${CHECKOSVERSIONCODENAME}-docker/docker.gpg] file:${PLAYCE_DATADIR}/repositories/${CHECKOSVERSIONCODENAME}-docker/ubuntu ${CHECKOSVERSIONCODENAME} stable
EOF

DEBIAN_FRONTEND=noninteractive apt-get -y update

fi

if [ "${CHECKOSFAMILY}" == "debian" ]; then
  # duplicate remove
  DEBIAN_FRONTEND=noninteractive apt -y remove dnsmasq podman buildah ntp

  # requirements install
  DEBIAN_FRONTEND=noninteractive NEEDRESTART_MODE=a apt -y install jq tar git wget bc python3 bash-completion chrony default-jre

  # install docker-ce
  DEBIAN_FRONTEND=noninteractive NEEDRESTART_MODE=a apt -y install docker-ce
elif [ "${CHECKOSFAMILY}" == "centos" ]; then
  # duplicate remove
  yum -y remove dnsmasq podman libvirt buildah ntpd ntp

  # requirements install
  yum -y install jq tar git wget bc python3 bash-completion chronyd java

  # install docker-ce
  yum -y install docker-ce
fi

systemctl enable docker --now
systemctl restart docker

# chrony firewall
if [ -f "/usr/bin/firewall-cmd" ]; then
  firewall-cmd --add-service=ntp --permanent
  firewall-cmd --reload
fi

# chrony temp config
cat << EOF > /tmp/chrony.conf
driftfile /var/lib/chrony/drift
makestep 1.0 3
rtcsync
allow 0.0.0.0/0
local stratum 8
keyfile /etc/chrony.keys
logdir /var/log/chrony

leapsectz right/UTC
maxupdateskew 100.0
EOF

# chrony config & start
if [ "${CHECKOSFAMILY}" == "debian" ]; then
  rm -rf /etc/chrony/chrony.conf
  mv /tmp/chrony.conf /etc/chrony/chrony.conf
  sed -i "s|^driftfile .*|driftfile /var/lib/chrony/chrony.drift|g" /etc/chrony/chrony.conf
  sed -i "s|^keyfile .*|keyfile /etc/chrony/chrony.keys|g" /etc/chrony/chrony.conf

  systemctl enable chrony --now
  systemctl restart chrony
elif [ "${CHECKOSFAMILY}" == "centos" ]; then
  rm -rf /etc/chrony.conf
  mv /tmp/chrony.conf /etc/chrony.conf
  sed -i "s|^driftfile .*|driftfile /var/lib/chrony/drift|g" /etc/chrony.conf
  sed -i "s|^keyfile .*|keyfile /etc/chrony.keys|g" /etc/chrony.conf

  systemctl enable chronyd --now
  systemctl restart chronyd
fi

# sync
chronyc -a makestep
chronyc sources

# certs dir create
mkdir -p ${PLAYCE_DATADIR}/certificates/{ca,certs}

# bind9 config
mkdir -p ${PLAYCE_CONFDIR}/bind9/{config,cache,records}
chown 0:101 ${PLAYCE_CONFDIR}/bind9/{config,cache,records}
chmod 775 ${PLAYCE_CONFDIR}/bind9/{cache,records}

if [ ! -f "${PLAYCE_CONFDIR}/bind9/config/named.conf" ]; then

cat << EOF > ${PLAYCE_CONFDIR}/bind9/config/named.conf
options {
        directory "/var/cache/bind";

        forwarders {
               ${UPSTREAM_DNS}; 
        };

        dnssec-validation no;

        listen-on port 53 { any; };
        listen-on-v6 port 53 { any; };
        allow-query { any; };

};

zone "local.cloud" IN {
        type master;
        file "named.local.cloud.zone";
};

zone "${PLAYCE_DOMAIN}" IN {
        type master;
        file "named.${PLAYCE_DOMAIN}.zone";
};

include "/etc/bind/named.openstack.zones";
include "/etc/bind/named.kubernetes.zones";
EOF

fi

touch ${PLAYCE_CONFDIR}/bind9/config/named.openstack.zones
touch ${PLAYCE_CONFDIR}/bind9/config/named.kubernetes.zones

if [ ! -f "${PLAYCE_CONFDIR}/bind9/cache/named.local.cloud.zone" ]; then

cat << EOF > ${PLAYCE_CONFDIR}/bind9/cache/named.local.cloud.zone
\$ORIGIN local.cloud.
\$TTL 86400      ; 1 day
@                               IN SOA   ns.local.cloud. root.local.cloud. (
                                $(date +%Y%m%d)01  ; serial
                                10800       ; refresh (3 hours)
                                900         ; retry (15 minutes)
                                604800      ; expire (1 week)
                                86400       ; minimum (1 day)
                                )
                                NS ns.local.cloud.


; base ttl, dns
\$TTL 604800
@                               IN A ${PLAYCE_DEPLOY}

; 1 day cache dns
\$TTL 86400
ns                              IN A ${PLAYCE_DEPLOY}

; deploy
registry                        IN A ${PLAYCE_DEPLOY}
repositories                    IN A ${PLAYCE_DEPLOY}
repository                      IN A ${PLAYCE_DEPLOY}
keycloak                        IN A ${PLAYCE_DEPLOY}
rancher                         IN A ${PLAYCE_DEPLOY}

EOF

fi

if [ ! -f "${PLAYCE_CONFDIR}/bind9/cache/named.${PLAYCE_DOMAIN}.zone" ]; then

cat << EOF > ${PLAYCE_CONFDIR}/bind9/cache/named.${PLAYCE_DOMAIN}.zone
\$ORIGIN ${PLAYCE_DOMAIN}.
\$TTL 86400      ; 1 day
@                               IN SOA   ns.${PLAYCE_DOMAIN}. root.${PLAYCE_DOMAIN}. (
                                $(date +%Y%m%d)01  ; serial
                                10800       ; refresh (3 hours)
                                900         ; retry (15 minutes)
                                604800      ; expire (1 week)
                                86400       ; minimum (1 day)
                                )
                                NS ns.${PLAYCE_DOMAIN}.


; base ttl, dns
\$TTL 604800
@                               IN A ${PLAYCE_DEPLOY}

; 1 day cache dns
\$TTL 86400
ns                              IN A ${PLAYCE_DEPLOY}

; deploy
registry                        IN A ${PLAYCE_DEPLOY}
repositories                    IN A ${PLAYCE_DEPLOY}
repository                      IN A ${PLAYCE_DEPLOY}
keycloak                        IN A ${PLAYCE_DEPLOY}
rancher                         IN A ${PLAYCE_DEPLOY}

EOF

fi

# registry config
if [ -f "/usr/bin/firewall-cmd" ]; then
  firewall-cmd --add-port=5000/tcp --permanent
  firewall-cmd --reload
fi

# registry certs copy
mkdir -p ${PLAYCE_CONFDIR}/registry
mkdir -p ${PLAYCE_DATADIR}/registry
rm -rf ${PLAYCE_CONFDIR}/registry/registry.local.cloud.*
${PLAYCE_DIR}/playcekube/certificates/create-certs.sh registry.local.cloud DNS:registry.local.cloud,DNS:registry.${PLAYCE_DOMAIN},DNS:localhost,IP:${PLAYCE_DEPLOY},IP:127.0.0.1
cp -rp ${PLAYCE_DATADIR}/certificates/certs/registry.local.cloud.* ${PLAYCE_CONFDIR}/registry/

if [ ! -f "${PLAYCE_CONFDIR}/registry/config.yml" ]; then

cat << EOF > ${PLAYCE_CONFDIR}/registry/config.yml
version: 0.1
log:
  fields:
    service: registry
storage:
  cache:
    blobdescriptor: inmemory
  filesystem:
    rootdirectory: /var/lib/registry
http:
  addr: :5000
  headers:
    X-Content-Type-Options: [nosniff]
  tls:
    certificate: /etc/docker/registry/registry.local.cloud.crt
    key: /etc/docker/registry/registry.local.cloud.key
  http2:
    disabled: false
EOF

fi

# repository config
if [ -f "/usr/bin/firewall-cmd" ]; then
  firewall-cmd --add-service=http --add-service=https --permanent
  firewall-cmd --reload
fi

mkdir -p ${PLAYCE_CONFDIR}/nginx/ssl
mkdir -p ${PLAYCE_DATADIR}/repositories/{helm-charts,certs}

# rootca copy repositories
rm -rf ${PLAYCE_DATADIR}/repositories/certs/playcecloud_rootca*.crt
cp -rp ${PLAYCE_DATADIR}/certificates/ca/playcecloud_rootca*.crt ${PLAYCE_DATADIR}/repositories/certs/

# repository certs copy
rm -rf ${PLAYCE_CONFDIR}/nginx/ssl/repository.local.cloud.*
${PLAYCE_DIR}/playcekube/certificates/create-certs.sh repository.local.cloud DNS:repository.local.cloud,DNS:repositories.local.cloud,DNS:repositories.${PLAYCE_DOMAIN},DNS:repository.${PLAYCE_DOMAIN},DNS:localhost,IP:${PLAYCE_DEPLOY},IP:127.0.0.1
cp -rp ${PLAYCE_DATADIR}/certificates/certs/repository.local.cloud.* ${PLAYCE_CONFDIR}/nginx/ssl/

if [ ! -f "${PLAYCE_CONFDIR}/nginx/repositories.conf" ]; then

cat << EOF > ${PLAYCE_CONFDIR}/nginx/repositories.conf
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                      '\$status \$body_bytes_sent "\$http_referer" '
                      '"\$http_user_agent" "\$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  5;

    gzip  on;

    include /etc/nginx/servers.conf;
}
EOF

fi

if [ ! -f "${PLAYCE_CONFDIR}/nginx/servers.conf" ]; then

cat << EOF > ${PLAYCE_CONFDIR}/nginx/servers.conf
server {
    listen       80;
    server_name  repository.local.cloud repositories.local.cloud repository.${PLAYCE_DOMAIN} repositories.${PLAYCE_DOMAIN};

    access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /repositories;
        autoindex on;
    }

    #error_page  404              /404.html;

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}

server {
    listen       443 ssl;
    server_name  repository.local.cloud repositories.local.cloud repository.${PLAYCE_DOMAIN} repositories.${PLAYCE_DOMAIN};
    access_log  /var/log/nginx/ssl-host.access.log  main;

    ssl_certificate /etc/nginx/ssl/repository.local.cloud.crt;
    ssl_certificate_key /etc/nginx/ssl/repository.local.cloud.key;

    #ssl_protocols  TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_protocols  TLSv1.2 TLSv1.3;

    location / {
        root   /repositories;
        autoindex on;
    }

    #error_page  404              /404.html;

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
EOF

fi

# base repo directory create
mkdir -p ${PLAYCE_DATADIR}/repositories/{centos7,rocky8,focal,jammy,focal-docker,jammy-docker}

# centos7(rhel7) .repo create
# base, update, extras
cat << EOF > ${PLAYCE_DATADIR}/repositories/centos7/base.repo
[base]
name=CentOS-\$releasever - Base
baseurl=https://repository.local.cloud/centos7/base
enabled=1
gpgcheck=0

[updates]
name=CentOS-$releasever - Updates
baseurl=https://repository.local.cloud/centos7/updates
enabled=1
gpgcheck=0

[extras]
name=CentOS-$releasever - Extras
baseurl=https://repository.local.cloud/centos7/extras
enabled=1
gpgcheck=0

[epel]
name=CentOS-$releasever - EPEL
baseurl=https://repository.local.cloud/centos7/epel
enabled=1
gpgcheck=0
EOF

# cri-o
cat << EOF > ${PLAYCE_DATADIR}/repositories/centos7/crio.repo
[devel_kubic_libcontainers_stable]
name=Stable Releases of Upstream github.com/containers packages (CentOS_7)
baseurl=https://repository.local.cloud/centos7/devel_kubic_libcontainers_stable
enabled=1
gpgcheck=0

[devel_kubic_libcontainers_stable_cri-o_1.22]
name=devel:kubic:libcontainers:stable:cri-o:1.22 (CentOS_7)
baseurl=https://repository.local.cloud/centos7/devel_kubic_libcontainers_stable_cri-o_1.22
enabled=1
gpgcheck=0

[devel_kubic_libcontainers_stable_cri-o_1.23]
name=devel:kubic:libcontainers:stable:cri-o:1.23 (CentOS_7)
baseurl=https://repository.local.cloud/centos7/devel_kubic_libcontainers_stable_cri-o_1.23
enabled=1
gpgcheck=0

[devel_kubic_libcontainers_stable_cri-o_1.24]
name=devel:kubic:libcontainers:stable:cri-o:1.24 (CentOS_7)
baseurl=https://repository.local.cloud/centos7/devel_kubic_libcontainers_stable_cri-o_1.24
enabled=1
gpgcheck=0

EOF

# docker-ce
cat << EOF > ${PLAYCE_DATADIR}/repositories/centos7/docker-ce-stable.repo
[docker-ce-stable]
name=Docker CE Stable - \$basearch
baseurl=https://repository.local.cloud/centos7/docker-ce-stable
enabled=1
gpgcheck=0
EOF

# rocky8(centos8) .repo create
# baseos, appstream
cat << EOF > ${PLAYCE_DATADIR}/repositories/rocky8/base.repo
[baseos]
name=Rocky Linux $releasever - BaseOS
baseurl=https://repository.local.cloud/rocky8/baseos
enabled=1
gpgcheck=0

[appstream]
name=Rocky Linux $releasever - AppStream
baseurl=https://repository.local.cloud/rocky8/appstream
enabled=1
gpgcheck=0

[extras]
name=Rocky Linux $releasever - Extras
baseurl=https://repository.local.cloud/rocky8/extras
enabled=1
gpgcheck=0
EOF

# cri-o
cat << EOF > ${PLAYCE_DATADIR}/repositories/rocky8/crio.repo
[devel_kubic_libcontainers_stable]
name=Stable Releases of Upstream github.com/containers packages (CentOS_8)
baseurl=https://repository.local.cloud/rocky8/devel_kubic_libcontainers_stable
enabled=1
gpgcheck=0

[devel_kubic_libcontainers_stable_cri-o_1.22]
name=devel:kubic:libcontainers:stable:cri-o:1.22 (CentOS_8)
baseurl=https://repository.local.cloud/rocky8/devel_kubic_libcontainers_stable_cri-o_1.22
enabled=1
gpgcheck=0

[devel_kubic_libcontainers_stable_cri-o_1.23]
name=devel:kubic:libcontainers:stable:cri-o:1.23 (CentOS_8)
baseurl=https://repository.local.cloud/rocky8/devel_kubic_libcontainers_stable_cri-o_1.23
enabled=1
gpgcheck=0

[devel_kubic_libcontainers_stable_cri-o_1.24]
name=devel:kubic:libcontainers:stable:cri-o:1.24 (CentOS_8)
baseurl=https://repository.local.cloud/rocky8/devel_kubic_libcontainers_stable_cri-o_1.24
enabled=1
gpgcheck=0
EOF

# docker-ce
cat << EOF > ${PLAYCE_DATADIR}/repositories/rocky8/docker-ce-stable.repo
[docker-ce-stable]
name=Docker CE Stable - \$basearch
baseurl=https://repository.local.cloud/rocky8/docker-ce-stable
enabled=1
gpgcheck=0
EOF

# focal
cat << EOF > ${PLAYCE_DATADIR}/repositories/focal/sources.list
deb http://repository.local.cloud/focal/ubuntu focal main restricted
deb http://repository.local.cloud/focal/ubuntu focal-updates main restricted
deb http://repository.local.cloud/focal/ubuntu focal universe
deb http://repository.local.cloud/focal/ubuntu focal-updates universe
deb http://repository.local.cloud/focal/ubuntu focal-backports main restricted universe
deb http://repository.local.cloud/focal/ubuntu focal-security main restricted
deb http://repository.local.cloud/focal/ubuntu focal-security universe

deb [arch=amd64 trusted=yes] http://repository.local.cloud/focal-docker/ubuntu focal stable
EOF

# jammy
cat << EOF > ${PLAYCE_DATADIR}/repositories/jammy/sources.list
deb http://repository.local.cloud/jammy/ubuntu jammy main restricted
deb http://repository.local.cloud/jammy/ubuntu jammy-updates main restricted
deb http://repository.local.cloud/jammy/ubuntu jammy universe
deb http://repository.local.cloud/jammy/ubuntu jammy-updates universe
deb http://repository.local.cloud/jammy/ubuntu jammy-backports main restricted universe
deb http://repository.local.cloud/jammy/ubuntu jammy-security main restricted
deb http://repository.local.cloud/jammy/ubuntu jammy-security universe

deb [arch=amd64 trusted=yes] http://repository.local.cloud/jammy-docker/ubuntu jammy stable
EOF


# nfs-server
if [ -f "/usr/bin/firewall-cmd" ]; then
  firewall-cmd --add-service=nfs --permanent
  firewall-cmd --reload
fi
mkdir -p ${PLAYCE_DATADIR}/nfsshare

# kubespray
mkdir -p ${PLAYCE_DATADIR}/kubespray/{inventory,envfiles}

# keycloak
mkdir -p ${PLAYCE_CONFDIR}/keycloak
# certs copy
rm -rf ${PLAYCE_CONFDIR}/keycloak/keycloak.${PLAYCE_DOMAIN}.*
${PLAYCE_DIR}/playcekube/certificates/create-certs.sh keycloak.${PLAYCE_DOMAIN} DNS:keycloak.local.cloud,DNS:keycloak.${PLAYCE_DOMAIN},DNS:localhost,IP:${PLAYCE_DEPLOY},IP:127.0.0.1
cp -rp ${PLAYCE_DATADIR}/certificates/certs/keycloak.${PLAYCE_DOMAIN}.* ${PLAYCE_CONFDIR}/keycloak/
chown 1000:0 ${PLAYCE_CONFDIR}/keycloak/keycloak.${PLAYCE_DOMAIN}.*

# rancher
mkdir -p ${PLAYCE_CONFDIR}/rancher
mkdir -p ${PLAYCE_DATADIR}/rancher
rm -rf ${PLAYCE_CONFDIR}/rancher/rancher.local.cloud.*
${PLAYCE_DIR}/playcekube/certificates/create-certs.sh rancher.${PLAYCE_DOMAIN} DNS:rancher.local.cloud,DNS:rancher.${PLAYCE_DOMAIN},DNS:localhost,IP:${PLAYCE_DEPLOY},IP:127.0.0.1
cp -rp ${PLAYCE_DATADIR}/certificates/certs/rancher.${PLAYCE_DOMAIN}.* ${PLAYCE_CONFDIR}/rancher/
# bridge iptables
sed -i "/net.bridge.bridge-nf-call-iptables=/d" /etc/sysctl.conf
echo "net.bridge.bridge-nf-call-iptables=1" >> /etc/sysctl.conf
sysctl -p
echo "ip_tables" > /etc/modules-load.d/iptables.conf
modprobe ip_tables

# service container image load
if [ -f ${PLAYCE_DIR}/srcdata/PlayceCloudData.DeployBase.${PLAYCEKUBE_VERSION}.tar.gz ]; then
  gunzip ${PLAYCE_DIR}/srcdata/PlayceCloudData.DeployBase.${PLAYCEKUBE_VERSION}.tar.gz
  docker load -i ${PLAYCE_DIR}/srcdata/PlayceCloudData.DeployBase.${PLAYCEKUBE_VERSION}.tar
fi

